Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
    precision highp float;

    uniform vec4 eyePosition;
    uniform mat4 quadrics[16];
    uniform mat4 clippers[16];
    uniform vec3 reflectance[16];
    uniform float refractiveIndicies[16];
    uniform vec4 phongs[16];

    uniform samplerCube background;

    in vec4 rayDir;

    out vec4 fragmentColor;

    vec3 objectColor = vec3(0, 1, 0);
    vec3 lightPoint = vec3(11, 6, 0);
    float lightPower = 1000.0;
    float epsilon = 0.001;
    int n_samples = 4;

    vec3 surfaceNormal(vec4 v, mat4 quadric) {
        float a = quadric[0][0];
        float b = quadric[0][1];
        float c = quadric[0][2];
        float d = quadric[0][3];
        float e = quadric[1][0];
        float f = quadric[1][1];
        float g = quadric[1][2];
        float h = quadric[1][3];
        float i = quadric[2][0];
        float j = quadric[2][1];
        float k = quadric[2][2];
        float l = quadric[2][3];
        float m = quadric[3][0];
        float n = quadric[3][1];
        float o = quadric[3][2];
        float p = quadric[3][3];

        v[3] = 1.0;
        float fx = dot(vec4(a, e, i, m), v) + dot(vec4(a, b, c, d), v);
        float fy = dot(vec4(b, f, j, n), v) + dot(vec4(e, f, g, h), v);
        float fz = dot(vec4(c, g, k, o), v) + dot(vec4(i, j, k, l), v);
        return normalize(vec3(fx, fy, fz));
    }

    vec4 surfaceNormalSide(vec4 p, mat4 quadric, vec4 d){
        vec3 N = surfaceNormal(p, quadric);
        vec4 N4 = vec4(N, 0.0);
        if (dot(d.xyz, N4.xyz) > 0.0){
            return -1.0 * N4;
        } else {
            return N4; 
        }
    }
  
    float intersectClippedQuadric(mat4 A, vec4 e, vec4 d, mat4 B){
        float a = dot(d * A, d);
        float b = dot(d * A, e) + dot(e * A, d);
        float c = dot(e * A, e);
        float D = sqrt(b*b-4.0*a*c);
        float t1 = (-b + D) / (2.0*a);
        float t2 = (-b - D) / (2.0*a);
        vec4 h1 = e + (t1*d);
        vec4 h2 = e + (t2*d);
        if (dot(h1*B, h1) > 0.0){
            t1 = -1.0;
        }
        if (dot(h2*B, h2) > 0.0){
            t2 = -1.0;
        }
        return (t1<0.0)?t2:((t2<0.0)?t1:min(t1, t2));
    }

    float findBestHit(vec4 e, vec4 d, out int bestQuadricIndex)
    {
        float bestT = -1.0;
        for(int i = 0; i < 16; i++){
            float t = intersectClippedQuadric(quadrics[i], e, d, clippers[i]);
            if(t > 0.0 && (bestT < 0.0 || t < bestT)){
                bestT = t;
                bestQuadricIndex = i;
            }
        }
        return bestT;
    }

    vec3 DReflect(vec3 inDir, vec3 normal) {
        return inDir - normal * dot(normal, inDir) * 2.0;
    }

    vec3 DRefract(vec3 inDir, vec3 normal, float refractiveIndex) {
        float ri = refractiveIndex;
        float cosa = - dot(normal, inDir);
        if (cosa < 0.0) { cosa = -cosa; normal = -normal; ri = 1.0/ri; }      
        float disc = 1.0 - (1.0 - cosa * cosa) / ri / ri;       
        if (disc < 0.0) return reflect(inDir, normal);
        return inDir * (1.0/ri) + normal * (cosa / ri - sqrt(disc)) ;
    }

    vec3 IReflect(vec3 inDir, vec3 normal, vec3 minReflectance) {
        float cosa = abs(dot(normal, inDir));
        return minReflectance + (1.0-minReflectance)*pow( 1.0-cosa, 5.0 ); 
    }

    vec3 IRefract(vec3 inDir, vec3 normal, vec3 minReflectance) {
        return vec3(1.0, 1.0, 1.0) - IReflect(inDir, normal, minReflectance); 
    }

    vec3 diffuseShading(vec4 p, vec4 N, vec4 lightDirNorm, float lightDist, float intensity){
        return objectColor * intensity * dot(N, lightDirNorm) * lightPower / (4.0*3.14*lightDist);
    }

    vec3 PhongShading(vec4 phong, vec3 N, vec3 d, vec3 lightDir, float lightPowerDensity) {
        vec3 ks = phong.xyz;
        float shininess = phong[3];
        float cosTheta = dot(N, lightDir);
        if(cosTheta < 0.0) {return vec3(0,0,0);}

        vec3 halfway = normalize(d + lightDir);
        float cosDelta = dot(N, halfway);
        if(cosDelta < 0.0) {return vec3(0,0,0);}

        return lightPowerDensity * ks * pow(cosDelta, shininess);
    }

    vec3 shade(vec4 p, vec4 d, vec4 N, vec4 phong){
        vec4 lightDir = vec4(lightPoint, 0.0) - p;
        float lightDist = dot(lightDir, lightDir);
        vec4 lightDirNorm = vec4(normalize(lightDir.xyz), 0.0);
        int lightQuadraticIndex;
        float lightT = findBestHit(p + epsilon*N, lightDirNorm, lightQuadraticIndex);
        float intensity = 0.0;
        if (lightT < 0.0 || lightDist < (lightT * lightT)) {
            intensity = lightPower / (4.0*3.14*lightDist);
        }
        vec3 phongShade =  PhongShading(phong, N.xyz, -d.xyz, lightDirNorm.xyz, intensity);
        vec3 diffuseShade = diffuseShading(p, N, lightDirNorm, lightDist, intensity);
        return phongShade + diffuseShade;
    }

    struct RRPoint
    {
        int i;
        vec4 p;
        vec4 d;
    };

    bool goLeft(RRPoint root, out RRPoint rrpoint, out vec4 color){
        vec4 N = surfaceNormalSide(root.p, quadrics[root.i], root.d);

        vec3 minReflectance = reflectance[root.i];
        // if (dot(minReflectance, minReflectance) == 0.0) {
        //     color = vec4(objectColor * diffuseShading(root.p, N),1);
        //     return false;
        // }
        
        vec4 reflectD = vec4(DReflect(root.d.xyz, N.xyz), 0.0);
        vec4 e = root.p + epsilon*reflectD;
        int quadricIndex;
        float t = findBestHit(e, reflectD, quadricIndex);
        bool isColor = (t <= 0.0);
        if (isColor) {
            color = vec4(texture(background, reflectD.xyz).rgb, 1);
            return false;
        }

        rrpoint.i = quadricIndex;
        rrpoint.p = e + t*reflectD;
        rrpoint.d = reflectD;
        return true;
    }

    bool goRight(RRPoint root, out RRPoint rrpoint, out vec4 color){
        vec4 N = surfaceNormalSide(root.p, quadrics[root.i], root.d);

        float refractiveIndex= refractiveIndicies[root.i];
        // if (refractiveIndex < 0.0) {
        //     color = vec4(objectColor * diffuseShading(root.p, N),1);
        //     return false;
        // }

        vec4 refractD = vec4(DRefract(root.d.xyz, N.xyz, refractiveIndex), 0.0);
        vec4 e = root.p + epsilon*refractD;
        int quadricIndex;
        float t = findBestHit(e, refractD, quadricIndex);
        bool isColor = (t <= 0.0);
        if (isColor) {
            color = vec4(texture(background, refractD.xyz).rgb, 1);
            return false;
        }

        rrpoint.i = quadricIndex;
        rrpoint.p = e + t*refractD;
        rrpoint.d = refractD;
        return true;
    }

    vec4 relfectRefract(vec4 e, vec4 d){
        int quadricIndex;
        float t = findBestHit(e, d, quadricIndex);
        if (t < 0.0){
            return vec4(texture(background, d.xyz).rgb, 1);
        }

        vec4 colorSum = vec4(0,0,0,0);
        float normalizer = float(n_samples);
        for (int sampleID = 0; sampleID < n_samples; ++sampleID)
        {
            RRPoint root;
            root.i = quadricIndex;
            root.p = e + t*d;
            root.d = d;
            vec4 N = surfaceNormalSide(root.p, quadrics[root.i], root.d);
            bool isReflective = dot(reflectance[root.i], reflectance[root.i]) > 0.0;
            bool isRefractive = refractiveIndicies[root.i] > 0.0;
            if (!isReflective && !isRefractive) {
                return vec4(shade(root.p, root.d, N, phongs[root.i]), 1);
                // return vec4(objectColor * diffuseShading(root.p, N),1);
            }

            vec3 intensity = vec3(1,1,1);
            for (int rrCount = 0; rrCount < 20; ++rrCount)
            {
                vec4 N = surfaceNormalSide(root.p, quadrics[root.i], root.d);
                bool isReflective = dot(reflectance[root.i], reflectance[root.i]) > 0.0;
                bool isRefractive = refractiveIndicies[root.i] > 0.0;
                vec3 intensityReflect = IReflect(root.d.xyz, N.xyz, reflectance[root.i].xyz);
                if (sampleID % 2 == 0 && isReflective) {
                    RRPoint left;
                    vec4 leftColor;
                    bool useRRPoint = goLeft(root, left, leftColor);
                    intensity *= intensityReflect;
                    if (useRRPoint){
                        root = left;
                    } else {
                        colorSum += leftColor * vec4(intensity, 1);
                        break;
                    }
                } 
                if (sampleID % 2 == 1 && isRefractive) {
                    RRPoint right;
                    vec4 rightColor;
                    bool useRRPoint = goRight(root, right, rightColor);
                    intensity *= vec3(1,1,1) - intensityReflect;
                    if (useRRPoint){
                        root = right;
                    } else {
                        colorSum += rightColor * vec4(intensity, 1);
                        break;
                    }
                }
                if (!isReflective && !isRefractive) {
                    colorSum += vec4(shade(root.p, root.d, N, phongs[root.i]), 1);
                    // colorSum += vec4(objectColor * diffuseShading(root.p, N),1);
                    break;
                }
                // normalizer--;
            }
        }
        return vec4((colorSum / normalizer).xyz, 1);
    }

  void main() {
    vec4 lightPoint4 = vec4(lightPoint, 0.0);
    vec4 d = vec4(normalize(rayDir.xyz), 0.0);
    vec4 e = eyePosition;
    fragmentColor = relfectRefract(e, d);
  }
`;