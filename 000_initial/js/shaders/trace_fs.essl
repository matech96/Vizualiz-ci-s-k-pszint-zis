Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
    precision highp float;
    precision highp sampler3D;

    uniform vec4 eyePosition;
    uniform sampler3D volume;

    in vec4 rayDir;

    out vec4 fragmentColor;

    vec3 objectColor = vec3(0.5, 0.5, 0.5);
    vec3 lightDir = vec3(0, 1, 0);

    float noise(vec3 r) {
        return texture(volume, r).r;
    }


    void main() {
        vec4 d = vec4(normalize(rayDir.xyz), 0.0);
        vec4 e = eyePosition;
        fragmentColor = vec4(1, 1, 1, 1);
        float t1 = (1.0 - e.y) / d.y;
        float t2 = (0.0 - e.y) / d.y;
        float tstart = max(min(t1, t2), 0.0);
        float tend = max(max(t1, t2), 0.0);
        vec3 p = (e + d * tstart).xyz;
        vec3 step = d.xyz * min((tend - tstart)/128.0, 0.05);
        float h;
        for(int i=0; i<128; i++){
            h = noise(p);
            if(h > 0.0) break;
            p += step;
        }
        if(h > 0.0) {
            vec3 gradient = vec3(
                noise(p + vec3(+0.05, 0.0, 0.0) ) -
                noise(p + vec3(-0.05, 0.0, 0.0) ) ,
                noise(p + vec3(0.0, +0.05, 0.0) ) -
                noise(p + vec3(0.0, -0.05, 0.0) ) , 
                noise(p + vec3(0.0, 0.0, +0.05) ) -
                noise(p + vec3(0.0, 0.0, -0.05) ) 
                );
            vec3 N = normalize(gradient);
            float intensity = dot(N, -1.0 * lightDir);
            fragmentColor = vec4(objectColor * intensity, 1);
        } else {
            fragmentColor = vec4(1, 1, 1, 1);
        }

    }
`;