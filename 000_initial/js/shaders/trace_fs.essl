Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
    precision highp float;
    precision highp sampler3D;

    uniform vec4 eyePosition;
    uniform sampler3D volume;

    in vec4 rayDir;

    out vec4 fragmentColor;

    vec3 objectColor = vec3(1,1,1); //vec3(0.5, 0.5, 0.5);
    vec3 lightDir = vec3(1, 1, 0);
    float density = 0.1;
    int nLoops = 128*2;

    float epsilon = 1e-6;

    float noise(vec3 r) {
        if(length(vec3(0) - r) < 2.0){
            return texture(volume, r).r;
        } else {
            return -1.0;
        }
    }

    float moveToSurface(vec4 e, vec4 d, out vec3 p){
        p = e.xyz;
        vec3 step = d.xyz * 0.05;
        p += step;
        float h;
        for(int i=0; i<nLoops; i++){
            h = noise(p);
            if(h > density) break;
            p += step;
        }
        return h;
    }

    vec3 PhongShading(vec4 phong, vec3 N, vec3 d, vec3 lightDir, float lightPowerDensity) {
        vec3 ks = phong.xyz;
        float shininess = phong[3];
        float cosTheta = dot(N, lightDir);
        if(cosTheta < 0.0) {return vec3(0,0,0);}

        vec3 halfway = normalize(d + lightDir);
        float cosDelta = dot(N, halfway);
        if(cosDelta < 0.0) {return vec3(0,0,0);}

        return lightPowerDensity * ks * pow(cosDelta, shininess);
    }

    void main() {
        vec4 d = vec4(normalize(rayDir.xyz), 0.0);
        vec4 e = eyePosition;
        fragmentColor = vec4(1, 1, 1, 1);

        vec3 p;
        float h = moveToSurface(e, d, p);

        if(h > density) {
            vec3 gradient = vec3(
                noise(p + vec3(+0.05, 0.0, 0.0) ) -
                noise(p + vec3(-0.05, 0.0, 0.0) ) ,
                noise(p + vec3(0.0, +0.05, 0.0) ) -
                noise(p + vec3(0.0, -0.05, 0.0) ) , 
                noise(p + vec3(0.0, 0.0, +0.05) ) -
                noise(p + vec3(0.0, 0.0, -0.05) ) 
                );
            vec3 N = normalize(gradient);
            vec3 tmp;
            float h = moveToSurface(vec4(p - (epsilon*lightDir), 0), vec4(lightDir, 0), tmp);
            if (h < density){
                float intensity = dot(N, -1.0 * lightDir);
                fragmentColor = vec4(objectColor * intensity, 1);
                fragmentColor += vec4(PhongShading(vec4(1,1,1,10), N, d.xyz, -1.0*lightDir, 1.0), 1);
                // fragmentColor = vec4(0, 1, 0, 1);
            } else {
                // fragmentColor = vec4(1, 0, 0, 1);
                fragmentColor = vec4(0, 0, 0, 1);
            }
            // fragmentColor = vec4(objectColor * h, 1); // Uncomment to turn off shadows and shading
        } else {
            fragmentColor = vec4(1, 1, 1, 1);
        }

    }
`;